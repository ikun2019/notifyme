services:
  client:
    container_name: client-container
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    env_file:
      - .client.env
    volumes:
      - ./client:/app
    depends_on:
      - gateway
  gateway:
    container_name: gateway-container
    build:
      context: ./gateway
      dockerfile: Dockerfile
    platform: linux/amd64
    ports:
      - '8000:8000'
    env_file:
      - .gateway.env
    volumes:
      - ./gateway:/app
      - ./ssl:/ssl
    command: ['npm', 'run', 'dev']
    depends_on:
      - user_service
      - post_service
      - thank_service
      - db
      - kafka1
      - kafka2
      - kafka3
      - redis
  websocket:
    container_name: websocket-container
    build:
      context: ./websocket
      dockerfile: Dockerfile
    platform: linux/amd64
    volumes:
      - ./websocket:/app
    command: ['npm', 'run', 'dev']
    ports:
      - '8080:8080'
  user_service:
    container_name: user_service-container
    build:
      context: ./services/user_service
      dockerfile: Dockerfile
    platform: linux/amd64
    env_file:
      - .user.env
    volumes:
      - ./services/user_service:/app
      - ./ssl:/ssl
    command: ['npm', 'run', 'dev']
  post_service:
    container_name: post_service-container
    build:
      context: ./services/post_service
      dockerfile: Dockerfile
    platform: linux/amd64
    env_file:
      - .post.env
    ports:
      - '5555:5555'
    volumes:
      - ./services/post_service:/app
      - ./ssl:/ssl
    command: ['npm', 'run', 'dev']
    depends_on:
      - db
  thank_service:
    container_name: thank_service-container
    build:
      context: ./services/thank_service
      dockerfile: Dockerfile
    platform: linux/amd64
    env_file:
      - .thank.env
    volumes:
      - ./services/thank_service:/app
      - ./ssl:/ssl
    command: ['npm', 'run', 'dev']
    depends_on:
      - db
  tag_service:
    container_name: tag_service-container
    build:
      context: ./services/tag_service
      dockerfile: Dockerfile
    platform: linux/amd64
    env_file:
      - .tag.env
    volumes:
      - ./services/tag_service:/app
      - ./ssl:/ssl
    command: ['npm', 'run', 'dev']
    depends_on:
      - db
  db:
    image: postgres:15.4
    container_name: notifyme_db
    platform: linux/amd64
    env_file:
      - .postgres.env
    volumes:
      - pg_data:/var/lib/postgresql/data
  redis:
    image: redis:7.2
    ports:
      - '6379:6379'
  zookeeper:
    image: zookeeper:3.9
    container_name: zookeeper-container
  kafka1:
    container_name: kafka1-container
    build:
      context: ./infra/kafka1
      dockerfile: Dockerfile
    volumes:
      - ./infra/kafka1/config:/opt/kafka/config
      - ./ssl:/ssl
    environment:
      KAFKA_HEAP_OPTS: '-Xmx512M -Xms512M'
    depends_on:
      - zookeeper
  kafka2:
    container_name: kafka2-container
    build:
      context: ./infra/kafka2
      dockerfile: Dockerfile
    volumes:
      - ./infra/kafka2/config:/opt/kafka/config
      - ./ssl:/ssl
    environment:
      KAFKA_HEAP_OPTS: '-Xmx512M -Xms512M'
    depends_on:
      - zookeeper
  kafka3:
    container_name: kafka3-container
    build:
      context: ./infra/kafka3
      dockerfile: Dockerfile
    volumes:
      - ./infra/kafka3/config:/opt/kafka/config
      - ./ssl:/ssl
    environment:
      KAFKA_HEAP_OPTS: '-Xmx512M -Xms512M'
    depends_on:
      - zookeeper
  # prometheus:
  #   image: prom/prometheus
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #   ports:
  #     - '9090:9090'
  # grafana:
  #   image: grafana/grafana
  #   ports:
  #     - '3010:3000'
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=admin
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
volumes:
  pg_data:
